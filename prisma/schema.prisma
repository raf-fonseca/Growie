// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// TODO: add more fields if neccessary
// run $ npx prisma db push

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String?
    email String? @unique
    emailVerified DateTime?
    image String?
    hashedPassword String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    favoriteIds String[] @db.ObjectId //An array of ids will be pushed evetime a listing is favourited
    accounts Account[] // One user can have multiple accounts
    listings Listing[] 
    reservations Reservation[]
}

model Account {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId 
    type String
    provider String
    providerAccountId String
    refresh_token String?
    accessToken String?
    accessTokenExpires DateTime?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Creates a relationship with the user using the userId, and it refrences to the id field of the 'model User'
    @@unique([provider, providerAccountId]) // This will make sure that the combination of provider and providerAccountId is unique
}

model Listing {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    title String
    dscription String
    imageSrc String
    createdAt DateTime @default(now())
    category String
    plot String
    season String
    locationValue String
    userId String @db.ObjectId
    price Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
    reservations Reservation[]
}

model Reservation {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    listingId String @db.ObjectId
    startDate DateTime
    endDate DateTime
    totalPrice Int
    createdAt DateTime @default(now())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
    listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}